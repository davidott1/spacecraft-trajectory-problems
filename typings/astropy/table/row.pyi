"""
This type stub file was generated by pyright.
"""

class Row:
    """A class to represent one row of a Table object.

    A Row object is returned when a Table object is indexed with an integer
    or when iterating over a table::

      >>> from astropy.table import Table
      >>> table = Table([(1, 2), (3, 4)], names=('a', 'b'),
      ...               dtype=('int32', 'int32'))
      >>> row = table[1]
      >>> row
      <Row index=1>
        a     b
      int32 int32
      ----- -----
          2     4
      >>> row['a']
      2
      >>> row[1]
      4
    """
    def __init__(self, table, index) -> None:
        ...
    
    def __getitem__(self, item): # -> tuple[Any, ...]:
        ...
    
    def __setitem__(self, item, val): # -> None:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __array__(self, dtype=..., copy=...):
        """Support converting Row to np.array via np.array(table).

        Coercion to a different dtype via np.array(table, dtype) is not
        supported and will raise a ValueError.

        If the parent table is masked then the mask information is dropped.
        """
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __iter__(self): # -> Generator[Any, Any, None]:
        ...
    
    def get(self, key, default=..., /): # -> tuple[Any, ...] | None:
        """Return the value for key if key is in the columns, else default.

        Parameters
        ----------
        key : `str`, positional-only
            The name of the column to look for.
        default : `object`, optional, positional-only
            The value to return if the ``key`` is not among the columns.

        Returns
        -------
        `object`
            The value in the ``key`` column of the row if present,
            ``default`` otherwise.

        Examples
        --------
        >>> from astropy.table import Table
        >>> t = Table({"a": [2, 3, 5], "b": [7, 11, 13]})
        >>> t[0].get("a")
        2
        >>> t[1].get("b", 0)
        11
        >>> t[2].get("c", 0)
        0
        """
        ...
    
    def keys(self):
        ...
    
    def values(self): # -> Generator[Any, Any, None]:
        ...
    
    @property
    def table(self): # -> Any:
        ...
    
    @property
    def index(self): # -> int:
        ...
    
    def as_void(self): # -> Any:
        """
        Returns a *read-only* copy of the row values in the form of np.void or
        np.ma.mvoid objects.  This corresponds to the object types returned for
        row indexing of a pure numpy structured array or masked array. This
        method is slow and its use is discouraged when possible.

        Returns
        -------
        void_row : ``numpy.void`` or ``numpy.ma.mvoid``
            Copy of row values.
            ``numpy.void`` if unmasked, ``numpy.ma.mvoid`` else.
        """
        ...
    
    @property
    def meta(self):
        ...
    
    @property
    def columns(self):
        ...
    
    @property
    def colnames(self):
        ...
    
    @property
    def dtype(self):
        ...
    
    def __repr__(self):
        ...
    
    def __str__(self) -> str:
        ...
    
    def __bytes__(self): # -> bytes:
        ...
    


