"""
This type stub file was generated by pyright.
"""

from astropy.utils.state import ScienceState
from .core import Cosmology

"""Built-in cosmologies.

See :attr:`~astropy.cosmology.realizations.available` for a full list.
"""
__all__ = ["available", "default_cosmology", "WMAP1", "WMAP3", "WMAP5", "WMAP7", "WMAP9", "Planck13", "Planck15", "Planck18"]
__doctest_requires__ = ...
_COSMOLOGY_DATA_DIR = ...
available = ...
def __getattr__(name):
    """Make specific realizations from data files with lazy import from ``PEP 562``.

    Raises
    ------
    AttributeError
        If "name" is not in :mod:`astropy.cosmology.realizations`
    """
    ...

def __dir__(): # -> list[str]:
    """Directory, including lazily-imported objects."""
    ...

class default_cosmology(ScienceState):
    """The default cosmology to use.

    To change it::

        >>> from astropy.cosmology import default_cosmology, WMAP7
        >>> with default_cosmology.set(WMAP7):
        ...     # WMAP7 cosmology in effect
        ...     pass

    Or, you may use a string::

        >>> with default_cosmology.set('WMAP7'):
        ...     # WMAP7 cosmology in effect
        ...     pass

    To get the default cosmology:

        >>> default_cosmology.get()
        FlatLambdaCDM(name='Planck18', H0=<Quantity 67.66 km / (Mpc s)>,
                      Om0=0.30966, ...
    """
    _default_value = ...
    _value = ...
    @classmethod
    def validate(cls, value: Cosmology | str | None) -> Cosmology | None:
        """Return a Cosmology given a value.

        Parameters
        ----------
        value : None, str, or `~astropy.cosmology.Cosmology`

        Returns
        -------
        `~astropy.cosmology.Cosmology` instance

        Raises
        ------
        TypeError
            If ``value`` is not a string or |Cosmology|.
        """
        ...
    


