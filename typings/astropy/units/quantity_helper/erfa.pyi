"""
This type stub file was generated by pyright.
"""

"""Quantity helpers for the ERFA ufuncs."""
erfa_ufuncs = ...
def has_matching_structure(unit, dtype): # -> bool:
    ...

def check_structured_unit(unit, dtype): # -> None:
    ...

def helper_s2c(f, unit1, unit2): # -> tuple[list[Any | None], CompositeUnit]:
    ...

def helper_s2p(f, unit1, unit2, unit3): # -> tuple[list[Any], Any]:
    ...

def helper_c2s(f, unit1): # -> tuple[list[None], tuple[Any, Any]]:
    ...

def helper_p2s(f, unit1): # -> tuple[list[None], tuple[Any, Any, Any]]:
    ...

def helper_gc2gd(f, nounit, unit1): # -> tuple[list[Any], tuple[Any, Any, Any, None]]:
    ...

def helper_gc2gde(f, unit_r, unit_flat, unit_xyz): # -> tuple[list[Any], tuple[Any, Any, Any, None]]:
    ...

def helper_gd2gc(f, nounit, unit1, unit2, unit3): # -> tuple[list[Any], tuple[Any, None]]:
    ...

def helper_gd2gce(f, unit_r, unit_flat, unit_long, unit_lat, unit_h): # -> tuple[list[Any], tuple[Any, None]]:
    ...

def helper_p2pv(f, unit1): # -> tuple[list[None], <subclass of Unit and StructuredUnit> | StructuredUnit]:
    ...

def helper_pv2p(f, unit1): # -> tuple[list[None], Any]:
    ...

def helper_pv2s(f, unit_pv): # -> tuple[list[None], tuple[Any, Any, Any, Any, Any, Any]]:
    ...

def helper_s2pv(f, unit_theta, unit_phi, unit_r, unit_td, unit_pd, unit_rd): # -> tuple[list[Any], <subclass of Unit and StructuredUnit> | StructuredUnit]:
    ...

def helper_pv_multiplication(f, unit1, unit2): # -> tuple[list[Any], <subclass of Unit and StructuredUnit> | StructuredUnit]:
    ...

def helper_pvm(f, unit1): # -> tuple[list[None], tuple[Any, Any]]:
    ...

def helper_pvstar(f, unit1): # -> tuple[list[Any | None], tuple[Any, Any, Any, Any, Any, Any, None]]:
    ...

def helper_starpv(f, unit_ra, unit_dec, unit_pmr, unit_pmd, unit_px, unit_rv): # -> tuple[list[Any | None], tuple[<subclass of Unit and StructuredUnit> | StructuredUnit, None]]:
    ...

def helper_pvtob(f, unit_elong, unit_phi, unit_hm, unit_xp, unit_yp, unit_sp, unit_theta): # -> tuple[list[Any | None], <subclass of Unit and StructuredUnit> | StructuredUnit]:
    ...

def helper_pvu(f, unit_t, unit_pv): # -> tuple[list[Any], Any]:
    ...

def helper_pvup(f, unit_t, unit_pv): # -> tuple[list[Any], Any]:
    ...

def helper_s2xpv(f, unit1, unit2, unit_pv): # -> tuple[list[None], <subclass of Unit and StructuredUnit> | StructuredUnit]:
    ...

def ldbody_unit(): # -> <subclass of Unit and StructuredUnit> | StructuredUnit:
    ...

def astrom_unit(): # -> <subclass of Unit and StructuredUnit> | StructuredUnit:
    ...

def helper_ldn(f, unit_b, unit_ob, unit_sc): # -> tuple[list[Any], CompositeUnit]:
    ...

def helper_aper(f, unit_theta, unit_astrom): # -> tuple[list[Any], Any]:
    ...

def helper_apio(f, unit_sp, unit_theta, unit_elong, unit_phi, unit_hm, unit_xp, unit_yp, unit_refa, unit_refb): # -> tuple[list[Any | None], <subclass of Unit and StructuredUnit> | StructuredUnit]:
    ...

def helper_atciq(f, unit_rc, unit_dc, unit_pr, unit_pd, unit_px, unit_rv, unit_astrom): # -> tuple[list[Any | None], tuple[Any, Any]]:
    ...

def helper_atciqn(f, unit_rc, unit_dc, unit_pr, unit_pd, unit_px, unit_rv, unit_astrom, unit_b): # -> tuple[list[Any | None], tuple[Any, Any]]:
    ...

def helper_atciqz_aticq(f, unit_rc, unit_dc, unit_astrom): # -> tuple[list[Any | None], tuple[Any, Any]]:
    ...

def helper_aticqn(f, unit_rc, unit_dc, unit_astrom, unit_b): # -> tuple[list[Any | None], tuple[Any, Any]]:
    ...

def helper_atioq(f, unit_rc, unit_dc, unit_astrom): # -> tuple[list[Any | None], tuple[Any, ...]]:
    ...

def helper_atoiq(f, unit_type, unit_ri, unit_di, unit_astrom): # -> tuple[list[Any], tuple[Any, Any]]:
    ...

def get_erfa_helpers(): # -> dict[Any, Any]:
    ...

